Angular

Basicamente o AngularJS é um framework de código aberto usado para construir aplicativos para web baseados em uma única página
    dinâmica


Explicações mais detalhadas:

    **** https://blog.algaworks.com/o-que-e-angular/ ****

    https://blog.betrybe.com/framework-de-programacao/angular/

    https://www.hostinger.com.br/tutoriais/o-que-e-angular/

    https://www.treinaweb.com.br/blog/o-que-e-o-angular-e-para-que-serve/

Angular CLI (ng)

  O Angular CLI é uma ferramenta open source desenvolvida pelo próprio time do Angular e é utilizado para facilitar a criação de componentes, classes, services e outros.

  Iniciar e gerenciar um projeto em Angular pode não ser uma tarefa tão simples. A existência de dezenas de bibliotecas, frameworks e ferramentas, que muitas vezes tentam resolver o mesmo problema, pode ser uma barreira aos primeiros contatos com a tecnologia.

  Ao observar esse problema, a equipe do Angular criou uma ferramenta de linha de comando chamada Angular CLI (Command Line Interface - Interface de Linha de Comando) cujo objetivo principal é facilitar o gerenciamento de projetos escritos nesse framework.



BootstrapStraping

  BootstrapStraping é um termo usado para o processo de build de um framework:

    "A técnica de se carregar um programa em um computador através de poucas instruções iniciais que permite a introdução
    do resto do programa a partir de um dispositivo de entrada"

    Basicamente é o que faz ser possivel você escrever um único comando e o projeto inteiro ser gerado diante dos seus olhos.



    O bootstrap é uma indicação de qual modulo/component da aplicação deve passar pelo processo de Bootstraping, ou seja,
    indica qual modulo/component deve ser injetado na aplicação.

    Dessa maneira, quando o ng serve for executado o webpack saberá quais componentes e recursos adicionar no chunk
    main.bundle.js

    O bootstrap do main.ts indica que o primeiro modulo que deve passar pelo processo de Bootstraping é o app.module
    O bootstrap do app.module indica que o primeiro componente que deve passar pelo processo de Bootsraping é o app.component.ts


    Obs: Módulo (agrupamento de componentes)


Webpack

      Webpack é um module bundler (empacotador de módulos) para JavaScript, em outras palavras, ele junta os arquivos JS
      (e também outros formatos) da sua aplicação (seja arquivos seus ou dependências externas) em um arquivo só
      (ou mais de um), de forma otimizada. Os arquivos são unificados na ordem certa e sem duplicação.

      Como o webpack sabe quais arquivos incluir e em qual ordem?
      Ele monta um grafo de dependências.

      Partindo de um arquivo inicial (entrada), ele verifica quais outros arquivos são importados por este, e os
      adiciona ao grafo. Para cada um desses ele também verifica quais eles importam, assim sucessivamente até que
      o grafo contenha todos os arquivos (módulos) necessários para a aplicação.



    chunks (pedaços) / bundles (pacotes)

        polyfills ->
            Integra todos os polyfills da aplicação
                Um polyfill é um pedaço de código (geralmente JavaScript na Web) usado para fornecer funcionalidades modernas
                em navegadores mais antigos que não o suportam nativamente
        main ->
            Integra todos os módulos e componentes da aplicação
        styles ->
            Integra todos os arquivos de estilo da aplicação
        vendor ->
            Integra todas as bibliotecas angular da aplicação
        inline ->
            Integra os utilitários do webpack necessários para realizar o bootstraping da aplicação

            Auxilia no carregamento dos demais scripts da aplicação.

  Mock (simulaçao) 

    Bom, quando falamos de teste de unidade, queremos testar as coisas isoladamente sem envolver outros componentes,
    mas o que acontece se seu componente (no caso do angular por exemplo) precisa de outro componente pra funcionar?

    Se você testar um componente que usa outro componente, esse não é mais um teste unitário por que envolve mais
    de uma unidade. Esse é o teste de integração.

    Nesse caso, como transformamos um teste de integração em um teste de unidade? Simulando o comportamento
    do segundo componente. Essa simulação é justamente o Mock.

    O Mock é um cara capaz de simular o comportamento de um componente, tornando possível você testar um
    outro componente isoladamente.

    No Angular, onde isso pode estar? Bom, digamos que seu componente lista e ordena um grupo de dados (usuários por exemplo).
    Como você testa a ordenação e a listagem sem pedir isso direto pra API? Você usa um json local mesmo.
    Isso já poderia ser chamado de Mock, você está simulando os dados da API.

    Esse exemplo é muito básico, só pra te dar a ideia mais ou menos do que é.
    Você pode "mockar" várias coisas: dados, comportamentos, etc..


Componente

  Os componentes são classes escritas em TypeScript que recebem o decorator @Component.

  Quando analisamos a estrutura de um componente, podemos dividi-lo nas seguintes partes:

  Metadata: são definições que iremos informar ao Angular que a nossa classe é um Component, por meio de decorators , nesse caso @Component (Essa função decora o componente AppComponent
  com metadados, ou seja, com dados relativos ao próprio componente)

  Classe: assim como em qualquer linguagem de programação que utiliza o paradigma da orientação a objeto, possui
  suas propriedades e métodos


  ****************************************************************************************************************

    Decorator
    Em algumas situações é necessário adicionar responsabilidades à objetos  específicos, e não a toda a classe.

    Solução:
      O padrão de projeto Decorator resolve o problema, permitindo que tais responsabilidades sejam adicionadas
      individualmente, em tempo de execução.

      Ao contrário da herança que aplica funcionalidades a todos os objetos da classe, o padrão decorator permite
      aplicar funcionalidades apenas a um objeto específico.

      O padrão Decorator permite estender as funcionalidades de um objeto em tempo de execução

    ****************************************************************************************************************


    Um Component é um tipo de classe existente em uma aplicação Angular, eles são identificados com o decorator @Component.
    Neste decorator existem algumas propriedades mais utilizadas como: selector, templateUrl e style. Vamos especificá-las:

    selector: é como identificamos o nosso componente.
    Para todo o componente existe um elemento único associado que permite que ele seja adicionado em um documento HTML.
    Nesse caso, o nome do elemento desse componente é cadastro e deve ser escrito como <cadastro></cadastro>

    ex: 

      Tag

      <app-topo> </app-topo> 

      ou 

      Atributo

      <div app-topo> </div> 

      ou

      Classe

      <div class="app-topo"></div> 


    TemplateUrl: é o nome do documento HTML que será a parte visual do componente. Nele podemos ter código em HTML
    juntamente com todos os bindings e diretivas necessários para a exibição do componente no navegador

    Template: também usado para descrever a parte visual do componente, porém nesse caso podemos fornecer código HTML "hard coded", como texto

      ex:

      template: `
        <p>
          Esse é o componente Topo
        </p>
  

    styleUrl: é onde informamos quais folhas de estilo contêm o código CSS que será aplicado ao template do componente.

    styles: também usado para descrever a parte do estilo do componente, porém nesse caso podemos fornecer código CSS "hard coded", como texto

    ex: 
    
      styles:
      [`
        .exemplo {
          color:red
         }
      `]

  */

    Com isso podemos concluir que a estrutura de um componente Angular deve ser formada por esses três elementos,
    template (HTML), estilo (CSS) e classe (TypeScript).
    Essas partes são organizadas em arquivos separados e unidas nos metadados do componente através do decorator @Component


    Outras propriedades:
      providers (provedores)

      Utilidade:
        A injeção de um serviço faz com que a instância da classe de um serviço se torne algo gerenciado pelo próprio framework, possibilitando inclusive que outros serviços sejam injetados dentro do mesmo, como por exemplo o serviço http do angular. 

        Além disso a injeção de serviços promove uma instância singleton do objeto que pode ser utilizado em diversas camadas da aplicação, como por exemplo no componente ou mesmo no módulo em um contexto mais alto  em que todos os componentes poderão utilizar a mesma instância do serviço, isso mesmo, a mesma instância, ou seja, é como se o objeto flutuasse pela aplicação toda, sendo injetado onde necessário e sobretudo, mantendo suas modificações.  
 



  Data Binding
    Comunicação entre o template HTML e o seu Component

      One-Way-Binding

        Component -> Template HTML = Property binding (ligação de propriedade) => [property] = "data"
                                     String interpolation (interpolação de string) => {{data}}
        Template HTML -> Component = Event binding  (ligação de evento)=> (event) = "expression"

      Two-way-Binding
        Component <--> Template Html

   Comunicação entre componentes (de pai para filho ou de filho para pai)

      De pai para filho
        @input -> Decorator que permite realizar a ligação de propriedade (property binding) do pai para o filho


        ex: 
         Se o atributo presente no property binding fosse xyz o decorator input iria decorar o atributo progresso com o valor do atributo xyz

         @Input('xyz') public progresso: number = 25;


         O decorator input decora o atributo progresso, tal decoração permite que esse atributo acesse o valor do atributo progresso presente no property binding localizado no componente pai

         @Input() public progresso: number = 0;

         O decorator input é executado após o construtor, portanto, o atributo tentativas não é acessível dentro do construtor

         @Input() public tentativas: number;



      De filho para pai
        @output -> Decorator que permite realizar a ligação de evento (event binding) do filho para o pai
        
        Obs: Para um evento ser emitido em um componente filho, utiliza-se o objeto 
        EventEmmiter

        ex: 
            O decorator output decora o atributo teste (possui como valor a instância de um emissor de eventos), tal decoração transforma esse atributo em um evento.

            @Output() public teste: EventEmitter<string> = new EventEmitter();
            
            O evento teste é emitido para o componente pai com a string oi como valor

            this.evento.emit('oi'); 

            Assim que o evento teste for detectado (ou seja, assim que ele for emitido no componente filho), ele será enviado para a função encerrarJogo

           Obs: No caso, o valor do evento é uma string
        
          <app-teste (teste)="teste($event)"></app-teste>
          
  


  Diretivas
      Diretivas são funcionalidades que manipulam o comportamento de elementos HTML no DOM

      Componentes -> Diretivas com template
      Estruturais -> ngFor, ngIf, nfSwtich, etc ... (Diretivas que criam estruturas html modificando o template)
      Atributos -> Diretivas aplicadas a atributos de elementos HTML




  Lifecycle Hooks (Ganchos do ciclo de vida)

      Principais

        ngOnChanges() -> Método chamado antes da inicialização de um componente
                      -> Método chamado a cada atualização do @Input(), ou seja, a cada atualização de um input de dados
                      -> Método chamado sempre que um atributo recebido de um componente pai
                        ( por meio  do decorator @Input ) é atualizado

        ngOnInit()    -> Método chamado na inicialização (inserção do template do componente em seu seletor) de um componente

        ngOnDestroy() -> Método chamado durante a destruição (exclusão do template do componente de seu seletor) de um componente

        ngDoCheck()
        ngAfterContentInit()
        ngAfterContentChecked()
        ngAfterViewInit()
        ngAfterViewChecked()


Services (serviços)

  Serviços nada mais são do que classes comuns com objetivos
  bem definidos que visam atender a alguma necessidade 
  especifica da aplicação.

  Ex: 
    - Log de acesso
    - Calcular taxas / impostos
    - API

  Escopos de injeção de Serviços  
    Escopo de módulo
    Escopo de componente com herança
    Escopo de componente sem herança


  @injectable() -> Injeta um serviço em outro serviço



  Promisses (promessas)

     Promise é um objeto usado para processamento assíncrono. Um Promise (de "promessa") representa um valor que pode estar disponível agora, no futuro ou nunca.

          Processamento síncrono e assícrono 
          
            Processamento síncrono: Aguarda a finalização do processo atual para o seguir para o próximo

            [processo 1]
                        [processo 2]
                                    [processo 3]

            Processamento assícrono: Não aguarda a finaização do processamento atual para seguir para o próximo

            [processo 1]
              [processo 2]
                [processo 3]                          


     Um Promise representa um proxy 
        ( um proxy é um servidor que age como um intermediário para requisições de clientes solicitando recursos de outros servidores.)
     para um valor que não é necessariamente conhecido quando a promessa é criada. Isso permite a associação de métodos de tratamento para eventos da ação assíncrona num caso eventual de sucesso ou de falha. Isto permite que métodos assíncronos retornem valores como métodos síncronos: ao invés do valor final, o método assíncrono retorna uma promessa ao valor em algum momento no futuro.

    Um Promise está em um destes estados: 

        pending (pendente): Estado inicial, que não foi realizada nem rejeitada.
        fulfilled (realizada): sucesso na operação.
        rejected (rejeitado):  falha na operação.
        settled (estabelecida): Que foi realizada ou rejeitada.
        
        Uma promessa pendente pode se tornar realizada com um valor ou rejeitada por um motivo (erro). Quando um desses estados ocorre, o método then do Promise é chamado, e ele chama o método de tratamento associado ao estado (rejected ou resolved).
      
    Resolve

        O método Promise.resolve(value) retorna (para o método then) um objeto Promise que é resolvido com o valor passado.

    Reject

        O método Promise.reject(motivo) retorna (para o método theb) um objeto Promise que é //rejeitada com um dado motivo.

    Then

         O método then() retorna uma Promise (para um callback). Possui dois argumentos, ambos são "call back functions", sendo uma para o sucesso e outra para o fracasso da promessa. 

    Cath

        O método catch() retorna uma Promise e lida apenas com casos rejeitados. Ele possui o mesmo comportamento de quando chamamos Promise.prototype.then(undefined, onRejected) (de fato, chamando obj.catch(onRejected) internamente é chamado obj.then(undefined, onRejected)).   

    Encadeamento
      
        Como os métodos Promise.prototype.then e Promise.prototype.catch  retornam promises, eles podem ser encadeados — uma operação chamada composição.  


    Explicação didática:
    
        Quando você envia requisições para outros sistemas, por exemplo se estiverem em outros computadores ou servidores, não tem como você calcular quanto tempo vai demorar para que você obtenha uma resposta com os dados que você deseja, certo?

        O Promise permite que o seu sistema possa continuar processando qualquer outra coisa enquanto espera por essa resposta.

        Por exemplo, imagine que ao abrir uma página, você manda um pedido pro servidor do Facebook e esse pedido vai demorar cerca de 40 segundos para ser completado e enviado de volta com a resposta.

        Porém, o que quer que seja que você pediu, apenas ocupa um pequeno quadrado no canto da página, que não é CRUCIAL para o funcionamento da página.

        Nesse caso temos 2 escolhas:

            1) Esperar os 40 segundos e só então mostrar a página inteira, em função desse quadradinho (ruim)

            2) Mostrar o resto da página e após 40 segundos adicionar o quadradinho apenas no local dele (bom)

        A Promise nos permite fazer esse segundo caso que é muito melhor. Ninguem quer esperar 40 segundos para ver algo na tela, isso pode passar a ilusão que o seu sistema está sem funcionar (vai ficar carregando durante 40 segundos, esperando a resposta do servidor do facebook) fazendo com que as pessoas desistamde acessá-lo.

        Basicamente o Promise nos provê um conjunto de functions e ferramentas para que possamos fazer a renderização desse quadradinho, porém ainda podemos renderizar todo o resto da página enquanto esperamos a informação chegar. Isso se chama assincronia de processos.   



        Para você entender melhor como funciona esse processo,
        
        
        
        entenda uma promise como uma promessa de entrega de determinado valor, 


        
        porém a resolução dessa promessa não ocorre de maneira síncrona (de forma linear), dentro dessa promise o resolve é o método responsável por de fato resolver a promessa e fazer a entrega de determinado conjunto de dados.

        Então resumidamente, temos uma promessa e dentro dela uma função que irá de fato resolvê-la ou cumpri-la para melhor dizer.

        Porém, como não sabemos quando a promise será resolvida, temos que fazer uma chamada ao método then de sua instância, que irá recuperar o conjunto de dados definidos na resolução (método resolve) quando isso ocorrer.



        Ex:

    /*public getOfertas(): Promise<Oferta[]>{

    //Promise é um objeto usado para processamento assíncrono que retorna em //seu construtor duas funções (resolve e reject) para um callback. Um //Promise (de "promessa") representa um valor que pode estar disponível //agora, no futuro ou nunca.

      return new Promise( 
      
      //O método Promise.resolve(value) retorna (para o método then) um objeto //Promise que foi resolvido com o valor passado.

      //O método Promise.reject(motivo) retorna (para o método then) um objeto //Promise que foi rejeitado com um dado motivo.

          (resolve, reject) =>{  

            let deu_certo = true;
            
            if(deu_certo){

                //Simulação da latência de uma requisição HTTP para uma API REST
                setTimeout( () => { resolve(this.ofertas) }, 3000); 
              
            }else{ 
                reject({
                  codigo_erro: 404,
                  mensagem_erro: "Servidor não encontrado"
                })
            }
          }
        )

        // Como os métodos Promise.prototype.then e Promise.prototype.catch  //retornam promises, eles podem ser encadeados — uma operação chamada //composição.
        .then(
          (ofertas: Oferta[])=>{
              console.log('Primeiro then');
              return ofertas;
          }
        )
        .then(
          (ofertas: Oferta[])=>{
            console.log('Segundo then');
            return new Promise(
              (res, rej)=> {
                  setTimeout(() => {res(ofertas)},3000)
              }
            );
          }
        )
        .then(
          (ofertas: Oferta[])=>{

            console.log('terceiro then executado após 3 segundos porque estava aguardando uma promise ser resolvida');
           return ofertas; 
          }
        )
     
  }
  */
  


      

          API

            API é um conjunto de rotinas e padrões de programação para acesso a um aplicativo de software ou plataforma baseado
            na Web. A sigla API refere-se ao termo em inglês "Application Programming Interface" que significa em tradução para
            o português "Interface de Programação de Aplicativos".

            Uma API é criada quando uma empresa de software tem a intenção de que outros criadores de software desenvolvam
            produtos associados ao seu serviço. Existem vários deles que disponibilizam seus códigos e instruções para
            serem usados em outros sites da maneira mais conveniente para seus usuários. O Google Maps é um dos grandes exemplos na área de APIs. Por meio de seu código original, muitos outros sites e aplicações utilizam os dados do Google Maps adaptando-o da melhor forma a fim de utilizar esse serviço.

            Quando uma pessoa acessa uma página de um hotel, por exemplo, é possível visualizar dentro do próprio site o mapa
            do Google Maps para saber a localização do estabelecimento e verificar qual o melhor caminho para chegar até lá.
            Esse procedimento é realizado por meio de uma API, onde os desenvolvedores do site do hotel utilizam do código do
            Google Maps para inseri-lo em um determinado local de sua página.

            Através das APIs, os aplicativos podem se comunicar uns com os outros sem conhecimento ou intervenção dos usuários.
            Elas funcionam através da comunicação de diversos códigos, definindo comportamentos específicos de determinado objeto
            em uma interface. A API liga as diversas funções em um site de maneira que possam ser utilizadas em outras aplicações.
            Sistemas de pagamento online são um bom exemplo de funcionalidade das APIs que rodam de maneira automática. De modo
            geral, a API é composta de uma série de funções acessíveis somente por meio de programação. Uma API WEB retorna um json ou xml.

            Recentemente, a utilização das APIs tem se espalhado nos plugins, que complementam a funcionalidade de um determinado            programa. Os desenvolvedores de um programa principal criam uma API específica e fornecem a outros criadores, que            desenvolvem plugins para aumentar o potencial e as funcionalidades do programa.

            Os sistemas operacionais também possuem suas APIs com as mesmas funções descritas acima. Por exemplo, o Windows
            possui APIs como a Telephony API, Win16 API e Win32 API. Quando um usuário executa um programa que envolva algum
            processo do sistema operacional, é bem provável que o Windows faça uma conexão entre o software e alguma de suas APIs.




            FRAMEWORK VS BIBLIOTECA VS API

            Framework: 
                      O framework é um conjunto de componentes contendo uma base pronta de um projeto.
                      Podemos citar como exemplo alguns Frameworks famosos no momento como o Bootstrap citado acima e o Angular
                      famework para aplicações em JavaScript mantido pela Google.

                      Estrutura real, ou conceitual, que visa servir como suporte (ou guia) para a construção de algo (um produto,
                      por exemplo).

                      Pensemos em uma tela de login! Normalmente, essas telas são muito parecidas em todas as aplicações,
                      elas possuem campo para usuário, senha, um botão de recuperação de senha e um de ‘entrar’.Pensando nisso, alguns desenvolvedores criaram um framework (BOOTSTRAP) que implementa essas funções no seu código. Assim, não é necessário reescrever o código sempre que for preciso criar uma tela de login.


            Biblioteca: 
                        As bibliotecas usam seu código como base a uma implementação de regras. As bibliotecas
                        são um conjunto de funções que visa facilitar a utilização de uma determinada linguagem, como citamos
                        acima o caso do Jquery que é uma biblioteca feita com a base em JavaScript.

                        É uma coleção de implementações de comportamentos escritos em uma linguagem e importadas no seu código.
                        Nesse caso, há uma interface bem definida para cada comportamento invocado. Um bom exemplo é a biblioteca jQuery que implementa certos comportamentos, como por exemplo, a manipulação do HTML.

            API:
                        Conjunto de comandos, funções, protocolos e objetos em que programadores podem interagir com sistemas externos.
                        Dessa forma, possibilitando a utilização de comandos padrões para agilizar operações comuns entre sistemas, de tal forma que desenvolvedores não precisarão escrever o código do zero. Imagine que você precisa implementar um módulo de mapas em sua aplicação, isso seria trabalhoso começado do zero, certo? Porque não usar algo já existente? O Google Maps através de sua API, por exemplo.

          APIs RESTful

            Basicamente, REST é um acrônimo para REpresentational State Transfer, ou seja, Transferência de Representação de
            Estado. O REST é, no final das contas, um estilo arquitetural que podemos utilizar ou não em nossas aplicações.

            A ideia do REST é utilizar de maneira mais eficiente e em sua plenitude as características do protocolo HTTP
            

            (HTTP (hyper text transport protcol) é um protocolo (protocol) que permite a obtenção de recursos, tais como documentos HTML. É a base de qualquer troca de dados na Web e um protocolo cliente-servidor, o que significa que as requisições são iniciadas pelo destinatário, geralmente um navegador da Web. Um documento completo é reconstruído a partir dos diferentes sub-documentos obtidos, como por exemplo texto, descrição do layout, imagens, vídeos, scripts e muito mais.)
            
            ,principalmente no que diz respeito à semântica do protocolo. O resultado disso ao final das contas é, além da
            utilização mais “correta” do protocolo, um trânsito de informações mais eficiente e, por consequência, mais rápido.

            Tipos de requisição ou Verbos HTTP

            1) GET: indica que um recurso será recuperado do servidor. (Select)
            2) POST: indica que um recurso será inserido ou criado no servidor. (Insert)
            3) PUT: indica que um recurso será atualizado no servidor. (Update)
            4) DELETE: indica que um recurso será removido do servidor. (Delete)        
    

        Json-server

         Ao criar aplicações, algumas vezes não temos APIs REST prontas para uso no durante o desenvolvimento. 
         
         É aí que uma API REST falsa entra em ação. json-server provê a funcionalidade para configurar um servidor de API REST falso com mínimo de esforço.

          Instalar
            npm install -g json-server

          Executar
            json-server --watch ofertas.database.json

       


            




